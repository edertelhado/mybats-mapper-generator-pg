/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.capybaratech.sql.gen.view;

import com.capybaratech.sql.gen.creator.MapperField;
import com.capybaratech.sql.gen.creator.MapperOptions;
import com.capybaratech.sql.gen.creator.MyBatisMapperCreator;
import com.github.javaparser.JavaParser;
import com.github.javaparser.ast.CompilationUnit;
import com.github.javaparser.ast.body.ClassOrInterfaceDeclaration;
import com.github.javaparser.ast.body.FieldDeclaration;
import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultCellEditor;
import javax.swing.JCheckBox;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.FieldView;
import javax.xml.parsers.ParserConfigurationException;

/**
 *
 * @author etelhado
 */
public class MainWindow extends javax.swing.JFrame {

    private File pojoDirectory = null;

    /**
     * Creates new form MainWindow
     */
    public MainWindow() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        resultClassFqnText = new javax.swing.JTextField();
        isGenInsert = new javax.swing.JCheckBox();
        isGenUpdate = new javax.swing.JCheckBox();
        isGenDelete = new javax.swing.JCheckBox();
        isGenSelectPk = new javax.swing.JCheckBox();
        saveButton = new javax.swing.JButton();
        packageFqnText = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        tableNameText = new javax.swing.JTextField();
        openButton = new javax.swing.JButton();
        isGenFindAll = new javax.swing.JCheckBox();
        jLabel4 = new javax.swing.JLabel();
        dtoDirectoryText = new javax.swing.JTextField();
        selectDtoDirectory = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        paramNameText = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jMenuBar1 = new javax.swing.JMenuBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("MyBats Mapper Generator");
        setPreferredSize(new java.awt.Dimension(1024, 768));
        setResizable(false);
        setSize(new java.awt.Dimension(1024, 768));

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel2.setPreferredSize(new java.awt.Dimension(740, 160));

        jLabel1.setText("Result Class FQN");

        isGenInsert.setText("Generate Insert");
        isGenInsert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                isGenInsertActionPerformed(evt);
            }
        });

        isGenUpdate.setText("Generate Update");
        isGenUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                isGenUpdateActionPerformed(evt);
            }
        });

        isGenDelete.setText("Generate delete by pk");

        isGenSelectPk.setText("Generate Select by pk");

        saveButton.setText("Generate");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        jLabel2.setText("Package FQN");

        jLabel3.setText("Table Name:");

        openButton.setText("OPEN");
        openButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openButtonActionPerformed(evt);
            }
        });

        isGenFindAll.setText("Generate Find All");

        jLabel4.setText("DTO Directory");

        selectDtoDirectory.setText("jButton3");
        selectDtoDirectory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectDtoDirectoryActionPerformed(evt);
            }
        });

        jLabel5.setText("Param name");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(resultClassFqnText, javax.swing.GroupLayout.DEFAULT_SIZE, 417, Short.MAX_VALUE)
                            .addComponent(packageFqnText)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(saveButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(openButton))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(isGenDelete)
                            .addComponent(isGenInsert))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(isGenUpdate)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(isGenSelectPk)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(isGenFindAll)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(dtoDirectoryText)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(selectDtoDirectory, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(tableNameText, javax.swing.GroupLayout.PREFERRED_SIZE, 381, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(paramNameText, javax.swing.GroupLayout.PREFERRED_SIZE, 381, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(resultClassFqnText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(tableNameText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(3, 3, 3)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(packageFqnText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(dtoDirectoryText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(selectDtoDirectory))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(isGenInsert)
                            .addComponent(isGenUpdate)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(paramNameText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(isGenDelete)
                    .addComponent(isGenSelectPk)
                    .addComponent(isGenFindAll))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(saveButton)
                    .addComponent(openButton))
                .addContainerGap())
        );

        getContentPane().add(jPanel2, java.awt.BorderLayout.PAGE_START);

        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel3.setLayout(new java.awt.BorderLayout());

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Allow Insert", "Allow Update", "Primary Key", "Field Name"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Boolean.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jTable1.setColumnSelectionAllowed(true);
        jTable1.setIntercellSpacing(new java.awt.Dimension(2, 2));
        jTable1.setShowGrid(true);
        jTable1.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jTable1);
        jTable1.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);

        jPanel3.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel3, java.awt.BorderLayout.CENTER);
        setJMenuBar(jMenuBar1);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void isGenUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_isGenUpdateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_isGenUpdateActionPerformed

    private void isGenInsertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_isGenInsertActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_isGenInsertActionPerformed

    private void openButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openButtonActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileFilter(new FileNameExtensionFilter("Java files", "java"));
        fileChooser.setAcceptAllFileFilterUsed(false);
        if (pojoDirectory != null) {
            fileChooser.setCurrentDirectory(pojoDirectory);
        }
        int returnValue = fileChooser.showOpenDialog(null);
        if (returnValue == JFileChooser.APPROVE_OPTION) {
            try {
                File selectedFile = fileChooser.getSelectedFile();
                var parser = new JavaParser();
                var opCu = parser.parse(selectedFile).getResult();
                if (opCu.isPresent()) {
                    CompilationUnit cu = opCu.get();
                    List<String> properties = new ArrayList<>();
                    cu.findAll(FieldDeclaration.class).forEach(field -> {
                        String type = field.getCommonType().asString();
                        field.getVariables().forEach(variable -> {
                            String name = variable.getNameAsString();
                            properties.add(name);
                        });

                    });
                    String[] columnNames = {"Allow Insert", "Allow Update", "Primary Key", "Property", "Column"};
                    DefaultTableModel model = new DefaultTableModel(columnNames, 0) {
                        @Override
                        public Class<?> getColumnClass(int columnIndex) {
                            // Se for a terceira coluna (índice 2), retorne Boolean.class para indicar que é uma coluna de checkbox
                            if (columnIndex < 3) {
                                return Boolean.class;
                            }
                            // Caso contrário, deixe o DefaultTableModel decidir o tipo de dados com base nos valores fornecidos
                            return super.getColumnClass(columnIndex);
                        }
                    };

                    for (String propertyName : properties) {
                        model.addRow(new Object[]{true, true, false, propertyName, generateSQLName(propertyName)});
                    }
                    jTable1.setModel(model);
                    jTable1.getColumnModel().getColumn(2).setCellEditor(new DefaultCellEditor(new JCheckBox()) {
                        @Override
                        public Component getTableCellEditorComponent(JTable table, Object value, boolean isSelected, int row, int column) {
                            Component comp = super.getTableCellEditorComponent(table, value, isSelected, row, column);
                            if (comp instanceof JCheckBox) {
                                JCheckBox checkBox = (JCheckBox) comp;
                                checkBox.addActionListener(new ActionListener() {
                                    @Override
                                    public void actionPerformed(ActionEvent e) {
                                        if (checkBox.isSelected()) {
                                            for (int i = 0; i < table.getRowCount(); i++) {
                                                if (i != row) {
                                                    table.setValueAt(false, i, column);
                                                }
                                            }
                                        }
                                    }
                                });
                            }
                            return comp;
                        }
                    });

                }
            } catch (FileNotFoundException ex) {
                Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_openButtonActionPerformed

    private void selectDtoDirectoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectDtoDirectoryActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Selecione um diretório");
        fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int returnValue = fileChooser.showOpenDialog(null);
        if (returnValue == JFileChooser.APPROVE_OPTION) {
            File selectedDirectory = fileChooser.getSelectedFile();
            dtoDirectoryText.setText(selectedDirectory.getAbsolutePath());
            pojoDirectory = selectedDirectory;
        } else {
            pojoDirectory = null;
        }
    }//GEN-LAST:event_selectDtoDirectoryActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        try {
            if (packageFqnText.getText().isBlank()) {
                JOptionPane.showMessageDialog(rootPane, "Package FQN cann'be blank", "Violation error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            if (resultClassFqnText.getText().isBlank()) {
                JOptionPane.showMessageDialog(rootPane, "Result Class FQN cann'be blank", "Violation error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            if (tableNameText.getText().isBlank()) {
                JOptionPane.showMessageDialog(rootPane, "Table name cann'be blank", "Violation error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            if (paramNameText.getText().isBlank()) {
                JOptionPane.showMessageDialog(rootPane, "Param name cann'be blank", "Violation error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            if (!isGenDelete.isSelected() && !isGenInsert.isSelected() && !isGenFindAll.isSelected() && !isGenSelectPk.isSelected() && !isGenUpdate.isSelected()) {
                JOptionPane.showMessageDialog(rootPane, "Please select at least one value", "Violation error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            var model = jTable1.getModel();
            List<MapperField> fields = new ArrayList<>();
            for (int count = 0; count < model.getRowCount(); count++) {
                //{"Allow Insert", "Allow Update", "Primary Key", "Property", "Column"};
                boolean isInsert = (boolean) model.getValueAt(count, 0);
                boolean isUpdate = (boolean) model.getValueAt(count, 1);
                boolean isPrimary = (boolean) model.getValueAt(count, 2);
                String property = (String) model.getValueAt(count, 3);
                String colum = (String) model.getValueAt(count, 4);
                MapperField field = new MapperField(colum, property, isInsert, isUpdate, isPrimary);
                fields.add(field);
            }

            MapperOptions options = new MapperOptions();
            options.setGenDelete(isGenDelete.isSelected());
            options.setGenInsert(isGenInsert.isSelected());
            options.setGenSelectAll(isGenFindAll.isSelected());
            options.setGenSelectByPk(isGenSelectPk.isSelected());
            options.setGenUpdate(isGenUpdate.isSelected());
            options.setPackageFqn(packageFqnText.getText());
            options.setParamName(paramNameText.getText());
            options.setResultClassFqn(resultClassFqnText.getText());
            options.setTableName(tableNameText.getText());
            JFileChooser fileChooser = new JFileChooser();
            fileChooser.setDialogTitle("Selecione um diretório");
            fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
            int returnValue = fileChooser.showOpenDialog(null);
            if (returnValue == JFileChooser.APPROVE_OPTION) {
                File selectedDirectory = fileChooser.getSelectedFile();
                File outDirectory = selectedDirectory;
                options.setOutputDirectory(outDirectory);
                MyBatisMapperCreator creator = new MyBatisMapperCreator();
                creator.create(fields, options);
            }

        } catch (ParserConfigurationException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_saveButtonActionPerformed

    private String generateSQLName(String property) {

        StringBuilder sqlName = new StringBuilder();

        for (int i = 0; i < property.length(); i++) {
            char c = property.charAt(i);
            if (Character.isUpperCase(c)) {
                sqlName.append("_");
                sqlName.append(Character.toLowerCase(c));
            } else {
                sqlName.append(c);
            }
        }

        return sqlName.toString();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainWindow().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField dtoDirectoryText;
    private javax.swing.JCheckBox isGenDelete;
    private javax.swing.JCheckBox isGenFindAll;
    private javax.swing.JCheckBox isGenInsert;
    private javax.swing.JCheckBox isGenSelectPk;
    private javax.swing.JCheckBox isGenUpdate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JButton openButton;
    private javax.swing.JTextField packageFqnText;
    private javax.swing.JTextField paramNameText;
    private javax.swing.JTextField resultClassFqnText;
    private javax.swing.JButton saveButton;
    private javax.swing.JButton selectDtoDirectory;
    private javax.swing.JTextField tableNameText;
    // End of variables declaration//GEN-END:variables
}
